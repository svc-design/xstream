name: Build and Release Flutter Packages

on:
  push:
    tags:
      - 'v*'  # ÈâÅ?Êµ†ÂëÆÂ∏πÈñ´‰Ω∫Â¢óÈèà?tagÈîõÂ†ùÓõß v0.1.4ÈîõÂ§é–ïÈçô?
  pull_request:
    branches:
      - main
    paths:
      - 'lib/**'
      - 'assets/**'
      - 'pubspec.*'
      - 'macos/**'
      - 'linux/**'
      - 'windows/**'
      - '.github/workflows/build-and-release.yml'

  workflow_dispatch:  # ÈâÅ?ÈèÄÓàõÂØîÈéµÂ¨™Âß©ÁëôÔπÄÂΩÇ

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [linux, windows, macos, android, ios]
        arch: [x64, arm64]
        exclude:
          - platform: linux
            arch: arm64
          - platform: windows
            arch: arm64
          - platform: macos
            arch: x64
          - platform: ios
            arch: x64
          - platform: android
            arch: x64
        include:
          - platform: macos
            arch: arm64
          - platform: linux
            arch: x64
          - platform: android
            arch: arm64
          - platform: ios
            arch: arm64
          - platform: windows
            arch: x64

    runs-on: ${{ matrix.platform == 'windows' && 'windows-latest' ||
                 matrix.platform == 'linux'   && 'ubuntu-latest' ||
                 matrix.platform == 'android' && 'ubuntu-latest' ||
                 matrix.platform == 'macos'   && 'macos-latest' ||
                 matrix.platform == 'ios'     && 'macos-latest' }}

    env:
      PLATFORM: ${{ matrix.platform }}
      ARCH: ${{ matrix.arch }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Flutter (Unix)
        if: ${{ matrix.platform != 'windows' }}
        shell: bash
        run: |
          echo "È¶ÉÊï° Setting up Flutter for $PLATFORM ($ARCH)"
          if [[ "$PLATFORM" == "linux" ]]; then
            sudo apt-get update
            sudo snap install flutter --classic
            sudo apt-get install -y clang cmake ninja-build libgtk-3-dev pkg-config libx11-dev binutils
            export PATH="$PATH:/snap/bin"
            as --version
          elif [[ "$PLATFORM" == "android" ]]; then
            sudo apt-get update
            sudo snap install flutter --classic
            export PATH="$PATH:/snap/bin"
            sudo apt-get install -y openjdk-17-jdk
            JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
            echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
            sudo update-alternatives --set java $JAVA_HOME/bin/java
            sudo update-alternatives --set javac $JAVA_HOME/bin/javac
            java -version
          elif [[ "$PLATFORM" == "macos" || "$PLATFORM" == "ios" ]]; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            if [[ "$ARCH" == "arm64" ]]; then
              eval "$(/opt/homebrew/bin/brew shellenv)"
            else
              eval "$(/usr/local/bin/brew shellenv)"
            fi
            brew install --cask flutter
            export PATH="$PATH:$HOME/Library/Flutter/bin"
          fi
          flutter doctor

      - name: Set up Flutter (Windows)
        if: ${{ matrix.platform == 'windows' }}
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.32.2'

      - name: Set up Go (Windows)
        if: ${{ matrix.platform == 'windows' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up MSYS2 and GCC (Windows)
        if: ${{ matrix.platform == 'windows' }}
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-x86_64-gcc
          path-type: inherit

      - name: Build Go static library (Windows)
        if: ${{ matrix.platform == 'windows' }}
        shell: msys2 {0}
        run: |
          gcc --version
          cd windows/go
          if [ "$(go env CGO_ENABLED)" != "1" ]; then
            export CGO_ENABLED=1
          fi
          go build -buildmode=c-archive -o ../runner/libgo_logic.a

      - name: Show Flutter version
        shell: bash
        run: flutter --version

      - name: Run Flutter tests (Linux only)
        if: ${{ matrix.platform == 'linux' && matrix.arch == 'x64' }}
        run: flutter test --reporter expanded

      - name: Generate launcher icons (Android)
        if: ${{ matrix.platform == 'android' }}
        run: |
          flutter pub get
          dart run flutter_launcher_icons


      - name: Set up Go (Linux only)
        if: ${{ matrix.platform == 'linux' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build Flutter App (Unix-like)
        if: ${{ matrix.platform != 'windows' }}
        shell: bash
        run: |
          case $PLATFORM in
            linux)
              flutter pub get
              flutter pub outdated
              flutter build linux --release ;;
            macos) flutter build macos --release ;;
            ios) flutter build ios --release --no-codesign ;;
            android)
              export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
              export PATH=$JAVA_HOME/bin:$PATH
              flutter build apk --release ;;
          esac

      - name: Build Flutter App (Windows)

        if: ${{ matrix.platform == 'windows' }}
        shell: powershell
        run: |
          flutter pub get
          flutter pub outdated
          flutter build windows --release
          if (-not (Test-Path "windows/flutter/generated_plugin_registrant.h")) {
            Write-Host "ÈâÇ?Plugin registrant header missing!"
            exit 1
          }

      - name: Create DMG package (macOS)
        if: ${{ matrix.platform == 'macos' }}
        shell: bash
        run: |
          echo "üì¶ Creating macOS DMG for $ARCH using Makefile"
          make macos-${ARCH}

      - name: Zip iOS Runner.app
        if: ${{ matrix.platform == 'ios' }}
        run: |
          cd build/ios/iphoneos
          zip -r XStream.app.zip Runner.app

      - name: Show distributable build output
        shell: bash
        run: |
          echo "È¶ÉÂπÜ Distributable output for $PLATFORM-$ARCH:"
          if [[ "$PLATFORM" == "linux" ]]; then
            find build/linux -type f -executable -exec file {} \; | grep ELF | cut -d: -f1 | tee /tmp/${PLATFORM}-${ARCH}-release.log
          else
            find build -type f \( -iname "*.apk" -o -iname "*.dmg" -o -iname "*.exe" -o -iname "*.aab" -o -iname "*.app" \) | tee /tmp/${PLATFORM}-${ARCH}-release.log
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            build/macos/*.dmg
            build/linux/x64/release/bundle/xstream
            build/windows/x64/runner/Release/xstream.exe
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/iphoneos/XStream.app.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: List all downloaded artifacts
        run: |
          echo "È¶ÉÂπÜ Listing contents of release-artifacts"
          find release-artifacts -type f | tee /tmp/artifacts.list
          echo "È¶ÉÊëù Artifact summary:"
          cat /tmp/artifacts.list

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: daily-${{ github.run_number }}
          name: Daily Build ${{ github.run_number }}
          files: |
            release-artifacts/**/*.dmg
            release-artifacts/**/xstream.exe
            release-artifacts/**/app-release.apk
            release-artifacts/**/XStream.app.zip
            release-artifacts/build-linux-x64/linux/x64/release/bundle/xstream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-to-oss:
      runs-on: ubuntu-latest
      needs: release-assets
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Download all artifacts
          uses: actions/download-artifact@v4
          with:
            path: release-artifacts

        - name: Install ossutil
          run: |
            curl -o ossutil.zip https://gosspublic.alicdn.com/ossutil/1.7.16/ossutil-v1.7.16-linux-amd64.zip
            unzip ossutil.zip
            chmod +x ossutil64
            mv ossutil64 /usr/local/bin/ossutil
            ossutil config -e oss-cn-wulanchabu.aliyuncs.com -i ${{ secrets.OSS_ACCESS_KEY_ID }} -k ${{ secrets.OSS_ACCESS_KEY_SECRET }} -L CH

        - name: Sync to OSS and update metadata
          run: bash scripts/sync_to_oss.sh
          env:
            GITHUB_RUN_NUMBER: ${{ github.run_number }}
